type Query {
  getUsers: [IUser]
  user(id: ID!): IUser
  me: IUser
}

type Mutation {
  saveUser(input: UserInput): IUser
  activate(id: ID): IUser
  changePassword(old: String, password: String): Boolean
  resetPassword(username: String, email: String): Boolean
  deleteUser(id: ID): Boolean
}

type Subscription {
  userCreated: IUser
  userModified: IUser
  userDeleted: ID
}

type IUser {
  id: ID!
  name: String
  email: String
  password: String
  role: Int
  activated: Boolean
  tournaments: [ITournament]
  venues: [IVenue]
  clubId: ID
  club: IClub
}

input UserInput {
  id: ID
  name: String!
  email: String
  password: String
  role: Int
  activated: Boolean
  club: IDDependencyInput
  tournaments: [IDDependencyInput]
  venues: [IDDependencyInput]
  clubId: ID
}

input IDDependencyInput {
  id: ID!
}
